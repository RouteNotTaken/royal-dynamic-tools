{
  "Name": "Dynamic Folder Export",
  "Objects": [
    {
      "Type": "DynamicFolder",
      "Name": "ImportCyberArk",
      "CustomProperties": [
        {
          "Name": "cyberArkHostname",
          "Type": "Text",
          "Value": "TODO"
        },
        {
          "Name": "cyberArkSafeName",
          "Type": "Text",
          "Value": "TODO"
        }
      ],
      "ScriptInterpreter": "python",
      "DynamicCredentialScriptInterpreter": "python",
      "DynamicCredentialScript": "import json\nimport requests\n\n'''\nRoyalTS dynamic folder script.\nUsed to pull all credentials from a CyberArk personal vault.\nAlso creates a dynamic credential for any local username configured in CyberArk for a specified host\n\nRequirements:\n  - Folder Custom Properties:\n    - cyberArkHostname: FQDN of your CyberArk portal\n\n  - Credentials:\n    - Supply a credential that has read access to the safe being accessed.\n'''\n\nHOSTNAME = '$CustomProperty.cyberArkHostname$'\nLDAP_CREDENTIAL = {\n    'username': '$EffectiveUsername$',\n    'password': '$EffectivePassword$',\n}\n\n\ndef ca_login(hostname, ldap_credential):\n    '''\n    Login and return session token.\n    Currently only supports LDAP auth.\n    '''\n    login_url = f'{hostname}/PasswordVault/API/auth/LDAP/Logon'\n    headers = {'Content-Type': 'application/json'}\n    payload = ldap_credential\n    r = requests.post(login_url, headers=headers, json=payload)\n    return r.json()\n\n\ndef ca_logout(hostname, api_key):\n    logout_url = f'{hostname}/PasswordVault/API/Auth/Logoff'\n    headers = {'Authorization': api_key}\n    r = requests.post(logout_url, headers=headers)\n    return r.text\n\n\ndef get_ca_account_id(hostname, api_key, address_name):\n    account_url = f'{hostname}/PasswordVault/API/accounts?searchtype=startswith&search={address_name}&limit=1'\n    headers = {'Authorization': api_key}\n    r = requests.get(account_url, headers=headers)\n    return {\n        'id': r.json()['value'][0]['id'],\n        'username': r.json()['value'][0]['userName'],\n    }\n\n\ndef get_ca_password(hostname, api_key, account_id):\n    password_url = f'{hostname}/PasswordVault/API/accounts/{account_id}/Password/Retrieve'\n    headers = {\n        'Authorization': api_key,\n        'Content-Type': 'application/json',\n        }\n    payload = {\n        'reason': 'RoyalTS Dynamic Credential',\n        'ActionType': 'show',\n    }\n    r = requests.post(password_url, headers=headers, json=payload)\n    return r.text\n\n\ndef main():\n    hostname = f'https://{HOSTNAME}'\n    address_name = '$Target.Name$'\n    api_key = ca_login(hostname, LDAP_CREDENTIAL)\n    account = get_ca_account_id(hostname, api_key, address_name)\n    credential = get_ca_password(hostname, api_key, account['id'])\n\n    rjson = {\n        \"Username\": account['username'],\n        \"Password\": credential.strip('\"')\n    }\n\n    print(json.dumps(rjson))\n\n\nif __name__ == \"__main__\":\n   main() ",
      "Script": "#! /usr/bin/env python3\nimport json\nimport requests\n'''\nRoyalTS dynamic folder script.\nUsed to pull all credentials from a CyberArk personal vault.\nAlso creates a dynamic credential for any local username configured in CyberArk for a specified host\nRequirements:\n  - Folder Custom Properties:\n    - cyberArkHostname: FQDN of your CyberArk portal\n  - Credentials:\n    - Supply a credential that has read access to the safe being accessed.\n'''\nHOSTNAME = '$CustomProperty.cyberArkHostname$'\nSAFE_NAME = '$CustomProperty.cyberArkSafeName$'\nLDAP_CREDENTIAL = {\n    'username': '$EffectiveUsername$',\n    'password': '$EffectivePassword$',\n}\n\ndef ca_login(hostname, ldap_credential):\n    '''\n    Login and return session token.\n    Currently only supports LDAP auth.\n    '''\n    login_url = f'{hostname}/PasswordVault/API/auth/LDAP/Logon'\n    headers = {'Content-Type': 'application/json'}\n    payload = ldap_credential\n    r = requests.post(login_url, headers=headers, json=payload)\n    return r.json()\n\ndef ca_logout(hostname, api_key):\n    logout_url = f'{hostname}/PasswordVault/API/Auth/Logoff'\n    headers = {'Authorization': api_key}\n    r = requests.post(logout_url, headers=headers)\n    return r.text\n\ndef get_ca_account_ids_from_safe(hostname, api_key, safe_name):\n    account_url = f'{hostname}/PasswordVault/API/accounts?filter= SafeName eq {safe_name}'\n    headers = {'Authorization': api_key}\n    r = requests.get(account_url, headers=headers)\n    ids = []\n    for i in r.json()['value']:\n        ids.append(\n            {\n                'id': i['id'],\n                'username': i['userName'],\n                'secret_type': i['secretType'],\n            }\n        )\n    return ids\n\ndef get_ca_password(hostname, api_key, account_id):\n    password_url = f'{hostname}/PasswordVault/API/accounts/{account_id}/Password/Retrieve'\n    headers = {\n        'Authorization': api_key,\n        'Content-Type': 'application/json',\n        }\n    payload = {\n        'reason': 'RoyalTS Dynamic Credential',\n        'ActionType': 'show',\n    }\n    r = requests.post(password_url, headers=headers, json=payload)\n    return r.json()\n\ndef main():\n    hostname = f'https://{HOSTNAME}'\n    api_key = ca_login(hostname, LDAP_CREDENTIAL)\n    account_ids = get_ca_account_ids_from_safe(hostname, api_key, SAFE_NAME)\n    rjson = {\n        \"Objects\": [\n            {\n                \"Type\": \"DynamicCredential\",\n                \"Name\": \"CA local account\",\n            }\n        ]\n    }\n    for cred in account_ids:\n        rjson['Objects'].append(\n            {\n                \"Type\": \"Credential\",\n                \"Name\": cred['username'],\n                \"Username\": cred['username'],\n                \"Password\": get_ca_password(hostname, api_key, cred['id'])\n            }\n        )\n    print(json.dumps(rjson))\n\nif __name__ == \"__main__\":\n   main()"
    }
  ]
}